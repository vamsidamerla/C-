// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TravlEzeeDataAccessLayer.Migrations
{
    [DbContext(typeof(TravelForms))]
    [Migration("20250607101649_StatingPoint")]
    partial class StatingPoint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TravelData")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("ServiceId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LocationId");

                    b.ToTable("locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1L,
                            LocationName = "chennai"
                        },
                        new
                        {
                            LocationId = 2L,
                            LocationName = "hyd"
                        },
                        new
                        {
                            LocationId = 3L,
                            LocationName = "kurnool"
                        });
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceId"));

                    b.Property<long>("DestLocId")
                        .HasColumnType("bigint");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceLocId")
                        .HasColumnType("bigint");

                    b.HasKey("ServiceId");

                    b.HasIndex("DestLocId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SourceLocId");

                    b.ToTable("services");
                });

            modelBuilder.Entity("ServiceType", b =>
                {
                    b.Property<long>("STypeId")
                        .HasColumnType("bigint");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("float");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("STypeId");

                    b.HasIndex("ServiceTypeName")
                        .IsUnique();

                    b.ToTable("servicetypes");

                    b.HasData(
                        new
                        {
                            STypeId = 101L,
                            PricePerKm = 23.199999999999999,
                            ServiceTypeName = "Express"
                        },
                        new
                        {
                            STypeId = 102L,
                            PricePerKm = 10.199999999999999,
                            ServiceTypeName = "Ordinary"
                        });
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.HasOne("Service", "TravelService")
                        .WithMany("Curbooking")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelService");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.HasOne("Location", "Destination")
                        .WithMany("DestinationList")
                        .HasForeignKey("DestLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceType", "servicetype")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Location", "Source")
                        .WithMany("SourceList")
                        .HasForeignKey("SourceLocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Source");

                    b.Navigation("servicetype");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("DestinationList");

                    b.Navigation("SourceList");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Navigation("Curbooking");
                });
#pragma warning restore 612, 618
        }
    }
}
